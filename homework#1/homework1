/*Write the necessary Node script to make this code work for all arrays:
[1,2,3,4,5,6,7,8].even(); // [2,4,6,8]
[1,2,3,4,5,6,7,8].odd(); // [1,3,5,7]
Test your code in Node.JS CLI
*/

let arr = [1, 2, 3, 4, 5, 6, 7, 8];
Array.prototype.even = function() {
  return this.filter(item => item % 2 == 0);
};
const evenNumbers = arr.even();
console.log(evenNumbers);

Array.prototype.odd = function() {
  return this.filter(item => item % 2 !== 0);
};
const oddNumbers = arr.odd();
console.log(oddNumbers);



/* 
// Fix the slow function to be asynchronous/non-blocking
function slow(callback) {
  for (let i = 0; i <= 5e8; i++) {}
  if (Math.random() > 0.5) {
    return callback('Error', null);
  }
  callback(null, { id: 12345 });
}
function exec(fn) {
  // Complete the code here to implement chaining with callback
}
exec(slow)
  .done(function(data) {
    console.log(data);
  })
  .fail(function(err) {
    console.log('Error: ' + err);
  });
*/

function slow(callback) {
  setTimeout(() => {
    for (let i = 0; i <= 5e8; i++) {}
  }, 0);

  if (Math.random() > 0.5) {
    return callback('Error', null);
  }
  return callback(null, { id: 12345 });
}
function exec(fn) {
  let obj = {};

  fn(function(err, data) {
    if (err == 'Error') {
      obj.done = function() {
        return {
          fail: function(callFun) {
            callFun(err);
          }
        };
      };
    } else {
      obj.done = function(callFun) {
        callFun(data);
        return { fail: function() {} };
      };
    }
  });

  return obj;
}
exec(slow)
  .done(function(data) {
    console.log(data);
  })
  .fail(function(err) {
    console.log('Error: ' + err);
  });






1. Explain why do we want sometimes to use setImmediate instead of using setTimeout?

	When we scheduled the  setImmediate function it executed before any setTimeout function regardless of the time

2. Explain the difference between process.nextTick and setImmediate?

	 process.nextTick is called before any I/O operation or cycle but  setImmediate is fired after the  I/O operation

3. Name 10 global modules/methods available in Node environment.

    • __filename
    • __dirname
    • console
    • exports
    • global
    • module
    • process
    • require()
    • setImmediate(callback[, ...args])
    • setTimeout(callback, delay[, ...args])
			

